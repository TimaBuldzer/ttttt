def check_and_process_clicker_for_account(account):
    logger.info(f'Запуск обработки кликеров для аккаунта: {account.number}')

    with browser_semaphore:
        # Получаем список всех активных кликеров и прокси для аккаунта
        clickers = Clicker.objects.filter(status='pending').exclude(completed_count=F('count')).select_for_update()
        proxy = get_random_proxy()

        # Проверяем корректность данных аккаунта перед использованием
        if not hasattr(account, 'cookies') or not account.token:
            logger.error(f"Неверные данные аккаунта: {account}")
            raise ValueError("Отсутствуют куки или токен у аккаунта")

        # Настраиваем Selenium с прокси
        selenium = configure_selenium_with_proxy(proxy)
        selenium.driver.minimize_window()  # Сворачиваем окно браузера для удобства

        try:
            # Находим все URL из AccountLog, по которым аккаунт уже прошел
            processed_urls = set(AccountLog.objects.filter(account=account).values_list('url', flat=True))

            # Отфильтровываем кликеры, по которым аккаунт еще не прошел
            account_clickers = [clicker for clicker in clickers if clicker.url not in processed_urls]

            if not account_clickers:
                logger.info(f'Для аккаунта {account.number} нет новых кликеров')
                return

            # Открываем первую ссылку и выполняем процесс кликов в одном браузере
            for clicker in account_clickers:
                logger.info(f'Аккаунт {account.number} переходит по ссылке {clicker.url}')
                
                # Переход на ссылку
                selenium.open(clicker.url)
                time.sleep(5)  # Даем странице время загрузиться

                # Добавляем куки и токен, если еще не были добавлены
                selenium.add_cookies(account.cookies)
                selenium.set_token(account.token)
                
                # Перезагружаем страницу, чтобы применить куки и токен
                selenium.driver.refresh()
                time.sleep(5)

                # Выполняем кликер-логику
                process_clicker(selenium, account, clicker)
                
                # Обновляем счетчик выполненных кликеров
                clicker.completed_count += 1
                clicker.save()

                # Обновляем статус кликера, если он завершен
                if clicker.completed_count >= clicker.count:
                    clicker.status = 'completed'
                    clicker.save()

                # Записываем в лог, что аккаунт прошел по этой ссылке
                AccountLog.objects.create(account=account, url=clicker.url, date=timezone.now())
                
                # Пауза перед следующим переходом
                time.sleep(random.randint(5, 10))

        except Exception as e:
            logger.error(f'Ошибка обработки аккаунта {account.number}: {e}')
        finally:
            # Закрываем браузер после прохождения по всем ссылкам
            selenium.quit()




@app.task
def check_pending_clickers_task():
    """
    Основная задача, которая запускает обработку всех аккаунтов параллельно.
    """
    accounts_with_unprocessed_clickers = []
    accounts = Account.objects.all()  # Получаем все аккаунты

    for account in accounts:
        processed_urls = set(AccountLog.objects.filter(account=account).values_list('url', flat=True))
        has_unprocessed_clickers = Clicker.objects.filter(status='pending').exclude(completed_count=F('count')).exclude(url__in=processed_urls).exists()
        if has_unprocessed_clickers:
            accounts_with_unprocessed_clickers.append(account)
    if not accounts_with_unprocessed_clickers:
        logger.info('Нет аккаунтов с непройденными кликерами')
        return

    with ThreadPoolExecutor(max_workers=16) as executor:
        futures = []
        for account in accounts_with_unprocessed_clickers:
            # Запускаем параллельную задачу для каждого аккаунта
            futures.append(executor.submit(check_and_process_clicker_for_account, account))
        for future in concurrent.futures.as_completed(futures):
            try:
                future.result()
            except Exception as exc:
                logger.error(f"Задача сгенерировала исключение: {exc}")

    logger.info('Все задачи по аккаунтам отправлены на обработку')
