import time
from django.core.management.base import BaseCommand
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

class WildberriesBot:
    def __init__(self, cookies, token, headless=False):
        chrome_options = Options()
        if headless:
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--disable-gpu")
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.cookies = cookies
        self.token = token

    def open_site(self):
        # Открываем сайт Wildberries
        self.driver.get("https://www.wildberries.ru")
        time.sleep(2)  # Даем время странице загрузиться

    def add_cookies(self):
        # Добавляем куки в браузер
        self.driver.delete_all_cookies()  # Очищаем все куки для чистого старта
        for cookie in self.cookies:
            selenium_cookie = {
                'name': cookie['name'],
                'value': cookie['value'],
                'path': cookie.get('path', '/'),
                'secure': cookie.get('secure', False),
                'httpOnly': cookie.get('httpOnly', False),
                'domain': '.wildberries.ru'  # Указываем домен, если он необходим
            }
            self.driver.add_cookie(selenium_cookie)
        print("Куки успешно добавлены")
        time.sleep(1)

    def set_token(self):
        # Устанавливаем токен в localStorage
        self.driver.execute_script(
            f"window.localStorage.setItem('wbx__tokenData', JSON.stringify({{'token': '{self.token}'}}));"
        )
        print("Токен успешно добавлен")
        time.sleep(1)

    def refresh_and_check(self):
        # Обновляем страницу, чтобы применить куки и токен
        self.driver.refresh()
        time.sleep(2)  # Даем время на обновление

class Command(BaseCommand):
    help = "Открывает сайт Wildberries, добавляет куки и токены, и оставляет браузер открытым для дальнейших правок"

    def add_arguments(self, parser):
        parser.add_argument('--token', type=str, help="Токен для авторизации")
        parser.add_argument('--cookies', type=str, help="Список куки в формате JSON строки")

    def handle(self, *args, **kwargs):
        # Получаем токен и куки из аргументов команды
        token = kwargs['token']
        cookies = eval(kwargs['cookies']) if kwargs['cookies'] else []

        bot = WildberriesBot(cookies=cookies, token=token)
        bot.open_site()
        bot.add_cookies()
        bot.set_token()
        bot.refresh_and_check()

        # Браузер останется открытым, чтобы пользователь мог внести правки вручную
        print("Браузер останется открытым для внесения правок. Закройте его вручную, когда закончите.")
